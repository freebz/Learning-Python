# 파이썬 3.X와 2.7에서 집합 리터럴

set([1, 2, 3, 4])               # 내장된 호출(모든 버전에서 가능)
{1, 2, 3, 4}                    # 샐운 집합 리터럴(2.7, 3.X)


set([1, 2, 3, 4])               # 내장된 함수: 2.6과 동일
# {1, 2, 3, 4}
set('spam')                     # 가변 객체 안의 모든 아이템 추가
# {'s', 'a', 'p', 'm'}

{1, 2, 3, 4}                    # 3.X와 2.7에서 새롭게 추가된 집합 리터럴
# {1, 2, 3, 4}
S = {'s', 'p', 'a', 'm'}
S
# {'s', 'a', 'p', 'm'}

S.add('alot')                   # 메서드는 이전과 동일하게 동작함
S
# {'s', 'a', 'p', 'alot', 'm'}


s1 = {1, 2, 3, 4}
S1 & {1, 3}                     # 교집합
# {1, 3}
{1, 5, 3, 6} | S1               # 합집합
# {1, 2, 3, 4, 5, 6}
S1 - {1, 3, 4}                  # 차집합
# {2}
S1 > {1, 3}                     # 포함 집합
# True


S1 - {1, 2, 3, 4}               # 빈 집합은 다르게 출력됨
# set()
type({})                        # {}는 여전히 딕셔너리를 의미함
# <class 'dict'>

S = set()                       # 빈 집합 초기화
S.add(1.23)
S
# {1.23}


{1, 2, 3} | {3, 4}
# {1, 2, 3, 4}
{1, 2, 3} | [3, 4]
# TypeError: unsupported operand type(s) for |: 'set' and 'list'

{1, 2, 3}.union([3, 4])
# {1, 2, 3, 4}
{1, 2, 3}.union({3, 4})
# {1, 2, 3, 4}
{1, 2, 3}.union(set([3, 4]))
# {1, 2, 3, 4}

{1, 2, 3}.intersection((1, 3, 5))
# {1, 3}
{1, 2, 3}.issubset(range(-5, 5))
# True
