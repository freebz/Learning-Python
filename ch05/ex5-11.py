# 비트 연산

x = 1                           # 10진수 1은 비트로 0001
x << 2                          # 2비트 왼쪽으로 이동: 0100
# 4
x | 2                           # 비트 OR(한쪽이 1인 비트): 0011
# 3
x & 1                           # 비트 AND(양쪽이 1인 비트): 0001
# 1


X = 0b0001                      # 2진수 리터럴
X << 2                          # 왼쪽으로 이동
# 4
bin(X << 2)                     # 2진수 숫자 문자열
# '0b100'

bin(X | 0b010)                  # 비트 OR: 한쪽이 1인 비트
# '0b11'
bin(X & 0b1)                    # 비트 AND: 양쪽이 1인 비트
# '0b1'


X = 0xFF                        # 16진수 리터럴
bin(X)
# '0b11111111'
X ^ 0b10101010                  # 비트 XOR: 한쪽만 1인 비트
# 85
bin(X ^ 0b10101010)
# '0b1010101'

int('01010101', 2)              # 숫자 => 수: 문자열을 해당 기수의 수로 변환
# 85
hex(85)                         # 수 => 숫자: 1진수 숫자 문자열
# '0x55'


X = 99
bin(X), X.bit_length(), len(bin(X)) - 2
# ('0b1100011', 7, 7)
bin(256), (256).bit_length(), len(bin(256)) - 2
# ('0b100000000', 9, 9)
