# 고급 포매팅 메서드 구문

# 고릅 포매팅 메서드 예제

'{0:10} = {1:10}'.format('spam', 123.4567) # 파이썬 3.6에서
# 'spam       =   123.4567'

'{0:>10} = {1:<10}'.format('spam', 123.4567)
# '      spam = 123.4567  '

'{0.platform:>10} = {1[kind]:<10}'.format(sys, dict(kind='laptom'))
# '     win32 = laptom    '


'{0:e}, {1:.3e}, {2:g}'.format(3.14159, 3.14159, 3.14159)
# '3.141590e+00, 3.142e+00, 3.14159'

'{0:f}, {1:.2f}, {2:06.2f}'.format(3.14159, 3.14159, 3.14159)
# '3.141590, 3.14, 003.14'


'{0:X}, {1:o}, {2:b}'.format(255, 255, 255) # 16진수, 8진수, 2진수
# 'FF, 377, 11111111'


bin(255), int('11111111', 2), 0b1111111 # 2진수 변환의 다른 방법
# ('0b11111111', 255, 255)

hex(255), int('FF', 16), 0xFF   # 16진수 변환의 다른 방법
# ('0xff', 255, 255)

oct(255), int('377', 8), 0o377  # 3.X에서 8진수 변환의 다른 방법
# ('0o377', 255, 255)           # 2.X에서는 0377을 사용하고 출력됨


'{0:.2f}'.format(1/ 3.0)        # 하드코딩된 인자
# '0.33'
'%.2f' % (1 / 3.0)              # 표현식을 이용한 같은 방법
# '0.33'

'{0:.{1}f}'.format(1 / 3.0, 4)  # 인수에서 값을 얻기
# '0.3333'
'%.*f' % (4, 1 / 3.0)           # 표현식을 이용한 같은 방법
# '0.3333'


'{0:.2f}'.format(1.2345)        # 문자열 메서드
# '1.23'
format(1.2345, '.2f')           # 내장 함수
# '1.23'
'%.2f' % 1.2345                 # 표현식
# '1.23'
