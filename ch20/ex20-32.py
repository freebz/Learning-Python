# 집합과 딕셔너리 컴프리헨션 이해하기

{x * x for x in range(10)}      # 컴프리헨션
# {0, 1, 64, 4, 36, 9, 16, 49, 81, 25}
set(x * x for x in range(10))   # 제너레이터와 타입 이름
# {0, 1, 64, 4, 36, 9, 16, 49, 81, 25}

{x: x * x for x in range(10)}
# {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81}
dict((x, x * x) for x in range(10))
# {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81}

x                               # 2.X, 3.X에서 루프 변수는 지역화됨
# NameError: name 'x' is not defined


res = set()
for x in range(10):             # 집합 컴프리헨션과 같음
    res.add(x * x)

res
# {0, 1, 64, 4, 36, 9, 16, 49, 81, 25}

res = {}
for x in range(10):             # 딕셔너리 컴프리헨션과 같음
    res[x] = x * x

res
# {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81}

x                               # 컴프리헨션 표현식에서는 지역화되지만, 루프문에서는 그렇지 않음
# 9


G = ((x, x * x) for x in range(10))
next(G)
# (0, 0)
next(G)
# (1, 1)
